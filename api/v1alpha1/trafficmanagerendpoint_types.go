package v1alpha1

import metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

// +kubebuilder:object:root=true
// +kubebuilder:resource:scope=Namespaced,categories={fleet-networking},shortName=tme
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:JSONPath=`.spec.profile`,name="Profile",type=string
// +kubebuilder:printcolumn:JSONPath=`.spec.endpointRef.name`,name="Endpoint-Reference",type=string
// +kubebuilder:printcolumn:JSONPath=`.status.conditions[?(@.type=='Accepted')].status`,name="Is-Accepted",type=string
// +kubebuilder:printcolumn:JSONPath=`.metadata.creationTimestamp`,name="Age",type=date

// TrafficManagerEndpoint is used to manage the Azure Traffic Manager Endpoints using cloud native way.
// It could represent a group of endpoints in the multi-cluster scenario.
// As the result, the controller may create multiple endpoints under the Traffic Manager Profile.
// https://learn.microsoft.com/en-us/azure/traffic-manager/traffic-manager-endpoint-types
type TrafficManagerEndpoint struct {
	metav1.TypeMeta `json:",inline"`
	// +optional
	metav1.ObjectMeta `json:"metadata,omitempty"`

	// The desired state of TrafficManagerEndpoint.
	Spec TrafficManagerEndpointSpec `json:"spec"`

	// The observed status of TrafficManagerEndpoint.
	// +optional
	Status TrafficManagerEndpointStatus `json:"status,omitempty"`
}

type TrafficManagerEndpointSpec struct {
	// +required
	// immutable
	// The profile should be created in the same namespace as the TrafficManagerEndpoint.
	Profile *string `json:"profile"`

	// The reference to the endpoint(s).
	// +required
	EndpointRef *TrafficManagerEndpointRef `json:"endpointRef"`

	// +optional
	// The properties of the endpoint.
	Properties *TrafficManagerEndpointProperties `json:"properties,omitempty"`
}

// TrafficManagerEndpointRef is the reference to the endpoint(s).
// In the multi-cluster scenario, it supports ServiceImport as the endpoint reference, representing a group of endpoints.
type TrafficManagerEndpointRef struct {
	// Name is the reference to the ServiceImport in the same namespace of Traffic Manager Profile.
	// +required
	Name string `json:"name"`
}

// TrafficManagerEndpointProperties defines the properties of the Traffic Manager endpoint.
// For now, only AzureEndpoints are supported.
// It assumes the service is exposed via PublicIPAddress in Azure and must have a DNS name assigned.
// Note: To use Traffic Manager with endpoints from other subscriptions, the controller needs to have read access to
// the endpoint.
type TrafficManagerEndpointProperties struct {
	// If Always Serve is enabled, probing for endpoint health will be disabled and endpoints will be included in the traffic
	// routing method.
	// +kubebuilder:default=false
	// +optional
	AlwaysServe bool `json:"alwaysServe,omitempty"`

	// List of custom headers.
	// +optional
	// +kubebuilder:validation:MaxItems=8
	// Note: using asterisk characters (*) in custom Host headers is unsupported.
	// Anything applicable for Http and Https protocol overrides custom header settings in profile configuration.
	CustomHeaders []CustomHeader `json:"customHeaders,omitempty"`

	// The total weight of endpoints behind the serviceImport when using the 'Weighted' traffic routing method.
	// Possible values are from 1 to 1000.
	// It is required when the routing method is 'Weighted'.
	// +optional
	// +kubebuilder:validation:Minimum=1
	// +kubebuilder:validation:Maximum=1000
	// For example, if there are two clusters exporting the service via public ip, each public ip will be configured
	// as "Weight"/2.
	Weight *int64 `json:"weight,omitempty"`

	// The fully-qualified DNS name or IP address of the endpoint.
	// READ-ONLY; populated in the status.
	// +optional
	Target *string `json:"target,omitempty"`
}

// AcceptedEndpoint is the Azure Traffic Manager endpoint which is successfully accepted under the traffic manager Profile.
type AcceptedEndpoint struct {
	// Name is a unique Azure Traffic Manager endpoint name generated by the controller.
	// +required
	Name *string `json:"name"`

	// +optional
	Properties *TrafficManagerEndpointProperties `json:"properties,omitempty"`

	// Cluster is where the endpoint is exported from.
	// +optional
	Cluster *ClusterStatus `json:"cluster,omitempty"`
}

type TrafficManagerEndpointStatus struct {
	// Endpoints contains a list of accepted Azure endpoints which are created or updated under the traffic manager Profile.
	// +optional
	Endpoints []AcceptedEndpoint `json:"endpoints,omitempty"`

	// Current service state
	// +optional
	// +patchMergeKey=type
	// +patchStrategy=merge
	// +listType=map
	// +listMapKey=type
	Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type"`
}

// TrafficManagerEndpointConditionType is a type of condition associated with a TrafficManagerEndpoint. This type
// should be used with the TrafficManagerEndpointStatus.Conditions field.
type TrafficManagerEndpointConditionType string

// TrafficManagerEndpointConditionReason defines the set of reasons that explain why a
// particular endpoints condition type has been raised.
type TrafficManagerEndpointConditionReason string

const (
	// EndpointConditionAccepted condition indicates whether endpoints have been created or updated for the profile.
	// This does not indicate whether or not the configuration has been propagated to the data plane.
	//
	// Possible reasons for this condition to be True are:
	//
	// * "Accepted"
	//
	// Possible reasons for this condition to be False are:
	//
	// * "Invalid"
	// * "Pending"
	EndpointConditionAccepted TrafficManagerEndpointConditionReason = "Accepted"

	// EndpointReasonAccepted is used with the "Accepted" condition when the condition is True.
	EndpointReasonAccepted TrafficManagerEndpointConditionReason = "Accepted"

	// EndpointReasonInvalid is used with the "Accepted" condition when one or
	// more endpoint references have an invalid or unsupported configuration
	// and cannot be configured on the Profile with more detail in the message.
	EndpointReasonInvalid TrafficManagerEndpointConditionReason = "Invalid"

	// EndpointReasonPending is used with the "Accepted" when creating or updating endpoint hits an internal error with
	// more detail in the message and the controller will keep retry.
	EndpointReasonPending TrafficManagerEndpointConditionReason = "Pending"
)

//+kubebuilder:object:root=true

// TrafficManagerEndpointList contains a list of TrafficManagerEndpoint.
type TrafficManagerEndpointList struct {
	metav1.TypeMeta `json:",inline"`
	// +optional
	metav1.ListMeta `json:"metadata,omitempty"`
	// +listType=set
	Items []TrafficManagerEndpoint `json:"items"`
}

func init() {
	SchemeBuilder.Register(&TrafficManagerEndpoint{}, &TrafficManagerEndpointList{})
}
